"""Task data models for Venice AI Task Entity."""

from __future__ import annotations

from dataclasses import dataclass
from datetime import datetime
from typing import Any


@dataclass
class VeniceTask:
    """Represents a task generated by Venice AI."""

    uid: str
    summary: str
    status: str = "needs_action"
    description: str | None = None
    due_date: datetime | None = None
    created: datetime | None = None
    updated: datetime | None = None

    def to_dict(self) -> dict[str, Any]:
        """Convert task to dictionary for Home Assistant."""
        result = {
            "uid": self.uid,
            "summary": self.summary,
            "status": self.status,
        }
        if self.description:
            result["description"] = self.description
        if self.due_date:
            result["due"] = self.due_date.isoformat()
        if self.created:
            result["created"] = self.created.isoformat()
        if self.updated:
            result["updated"] = self.updated.isoformat()
        return result